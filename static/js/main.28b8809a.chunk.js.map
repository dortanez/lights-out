{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","i","push","Array","map","Math","random","createBoard","board","setBoard","flipCellsAround","coord","oldBoard","split","Number","y","x","flipCell","boardCopy","copy","every","j","HTMLBoard","row","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAqBeA,MALf,YAA4C,IAA5BC,EAA2B,EAA3BA,kBAAmBC,EAAQ,EAARA,MAC3BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,wBAAIE,UAAWD,EAASE,QAASJ,K,MCqF3BK,MA1Ef,YAAuD,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,oBAAuB,EAC1BC,mBAG1B,WAEE,IADA,IAAIC,EAAe,GACXC,EAAI,EAAGA,EAAIL,EAAOK,IACxBD,EAAaE,KAAK,YAAIC,MAAMN,IAAQO,KAAI,SAAAH,GAEtC,QADeI,KAAKC,SACJR,OAGpB,OAAOE,EAX0BO,IADiB,mBAC7CC,EAD6C,KACtCC,EADsC,KAqBpD,SAASC,EAAgBC,GACvBF,GAAS,SAAAG,GAAa,IAAD,EACJD,EAAME,MAAM,KAAKT,IAAIU,QADjB,mBACZC,EADY,KACTC,EADS,KAGbC,EAAW,SAACF,EAAGC,EAAGE,GAElBF,GAAK,GAAKA,EAAInB,GAASkB,GAAK,GAAKA,EAAInB,IACvCsB,EAAUH,GAAGC,IAAME,EAAUH,GAAGC,KAQ9BG,EAAOP,EAASR,KAAI,SAAAH,GAAC,mBAAQA,MAQnC,OANAgB,EAASF,EAAEC,EAAEG,GACbF,EAASF,EAAE,EAAEC,EAAEG,GACfF,EAASF,EAAEC,EAAE,EAAEG,GACfF,EAASF,EAAEC,EAAE,EAAEG,GACfF,EAASF,EAAE,EAAEC,EAAEG,GAERA,KAKP,GAhCKX,EAAMY,OAAM,SAAAnB,GAAC,OAAIA,EAAEmB,OAAM,SAAAC,GAAC,OAAKA,QAiClC,OAAO,yBAAK5B,UAAU,aAAf,YAOb,IADA,IAAM6B,EAAY,GACVrB,EAAI,EAAGA,EAAIJ,EAAOI,IAAK,CAE7B,IADA,IAAMsB,EAAM,GADiB,WAErBF,GACN,IAAIV,EAAK,UAAMV,EAAN,YAAWoB,GACpBE,EAAIrB,KAAK,kBAAC,EAAD,CAAMsB,IAAKb,EAAOrB,kBAAmB,kBAAIoB,EAAgBC,IAAQpB,MAAOiB,EAAMP,GAAGoB,OAFpFA,EAAI,EAAGA,EAAIzB,EAAOyB,IAAM,EAAxBA,GAKRC,EAAUpB,KAAK,wBAAIsB,IAAKvB,GAAIsB,IAG9B,OACE,2BAAO9B,UAAU,SACf,+BAAQ6B,K,MCpFCG,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAOG,MAAO,EAAGC,MAAO,EAAGC,oBAAqB,OCGlC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28b8809a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit}) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe}/>;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++) {\n      initialBoard.push([...Array(ncols)].map(i => {\n        const random = Math.random();\n        return random > chanceLightStartsOn ? false : true;\n      }))\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(i => i.every(j => !j))\n    \n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      const copy = oldBoard.map(i => [...i]);\n\n      flipCell(y,x,copy);\n      flipCell(y-1,x,copy);\n      flipCell(y,x-1,copy);\n      flipCell(y,x+1,copy);\n      flipCell(y+1,x,copy);\n\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n      if(hasWon()) {\n        return <div className='Board-win'>You Win!</div>\n      }\n\n\n\n  // make table board\n  const HTMLBoard = [];\n  for(let i = 0; i < ncols; i++) {\n    const row = [];\n    for(let j = 0; j < nrows; j++) {\n      let coord = `${i}-${j}`;\n      row.push(<Cell key={coord} flipCellsAroundMe={()=>flipCellsAround(coord)} isLit={board[i][j]}/>\n      )\n    }\n    HTMLBoard.push(<tr key={i}>{row}</tr>);\n  }\n\n  return (\n    <table className='Board'>\n      <tbody>{HTMLBoard}</tbody>\n    </table>\n  )\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board nrows={3} ncols={3} chanceLightStartsOn={.50} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}