{"ast":null,"code":"import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    for (let i = 0; i < nrows; i++) {\n      initialBoard.push([...Array(ncols).map(i => {\n        const random = Math.random();\n        random > chanceLightStartsOn ? 'f' : 't';\n      })]);\n    }\n\n    return initialBoard;\n  }\n\n  console.log(createBoard());\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/danisaortanez/Desktop/Springboard/submitted exercises/39-react-fundamentals/lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","push","Array","map","random","Math","console","log","hasWon","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAf,EAAsD;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,KAAnB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7BD,MAAAA,YAAY,CAACE,IAAb,CAAkB,CAAC,GAAGC,KAAK,CAACR,KAAD,CAAL,CAAaS,GAAb,CAAiBH,CAAC,IAAI;AAC1C,cAAMI,MAAM,GAAGC,IAAI,CAACD,MAAL,EAAf;AACAA,QAAAA,MAAM,GAAGT,mBAAT,GAA+B,GAA/B,GAAqC,GAArC;AACD,OAHqB,CAAJ,CAAlB;AAKD;;AACD,WAAOI,YAAP;AACD;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYT,WAAW,EAAvB;;AAEA,WAASU,MAAT,GAAkB,CAChB;AACD;;AAED,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9Bb,IAAAA,QAAQ,CAACc,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBX,GAAjB,CAAqBY,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOI,SAAP,KAAqB;AACpC;AAEA,YAAIJ,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGnB,KAAd,IAAuBkB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGnB,KAAzC,EAAgD;AAC9CwB,UAAAA,SAAS,CAACL,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACI,SAAS,CAACL,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;AAEA;AAEA;;AACD,KAhBO,CAAR;AAiBD,GAvCmD,CAyCpD;AAEA;AAEA;AAEA;;AACD;;AAED,eAAerB,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++) {\n      initialBoard.push([...Array(ncols).map(i => {\n        const random = Math.random();\n        random > chanceLightStartsOn ? 'f' : 't';\n      }\n      )])\n    }\n    return initialBoard;\n  }\n  console.log(createBoard())\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}