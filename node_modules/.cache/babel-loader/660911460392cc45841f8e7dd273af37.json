{"ast":null,"code":"var _jsxFileName = \"/Users/danisaortanez/Desktop/Springboard/submitted exercises/39-react-fundamentals/lights-out/src/Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    for (let i = 0; i < nrows; i++) {\n      initialBoard.push([...Array(ncols)].map(i => {\n        const random = Math.random();\n        return random > chanceLightStartsOn ? false : true;\n      }));\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(i => i.every(j => !j));\n    console.log(board);\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n\n      const copy = oldBoard.map(i => [...i]);\n      flipCell(y, x, copy);\n      flipCell(y - 1, x, copy);\n      flipCell(y, x - 1, copy);\n      flipCell(y, x + 1, copy);\n      flipCell(y + 1, x, copy);\n      return copy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }\n    }, \"You Win!\");\n  } // make table board\n\n\n  const HTMLBoard = [];\n\n  for (let i = 0; i < ncols; i++) {\n    const row = [];\n\n    for (let j = 0; j < nrows; j++) {\n      let coord = `${i}-${j}`;\n      row.push( /*#__PURE__*/React.createElement(Cell, {\n        key: coord,\n        flipCellsAroundMe: () => flipCellsAround(coord),\n        isLit: board[i][j],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 16\n        }\n      }));\n    }\n\n    HTMLBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 20\n      }\n    }, row));\n  }\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, HTMLBoard));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/danisaortanez/Desktop/Springboard/submitted exercises/39-react-fundamentals/lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","push","Array","map","random","Math","hasWon","every","j","console","log","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","copy","HTMLBoard","row"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++) {\n      initialBoard.push([...Array(ncols)].map(i => {\n        const random = Math.random();\n        return random > chanceLightStartsOn ? false : true;\n      }))\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(i => i.every(j => !j))\n    console.log(board)\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      const copy = oldBoard.map(i => [...i]);\n\n      flipCell(y,x,copy);\n      flipCell(y-1,x,copy);\n      flipCell(y,x-1,copy);\n      flipCell(y,x+1,copy);\n      flipCell(y+1,x,copy);\n\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n      if(hasWon()) {\n        return <div>You Win!</div>\n      }\n\n\n\n  // make table board\n  const HTMLBoard = [];\n  for(let i = 0; i < ncols; i++) {\n    const row = [];\n    for(let j = 0; j < nrows; j++) {\n      let coord = `${i}-${j}`;\n      row.push(<Cell key={coord} flipCellsAroundMe={()=>flipCellsAround(coord)} isLit={board[i][j]}/>\n      )\n    }\n    HTMLBoard.push(<tr key={i}>{row}</tr>);\n  }\n\n  return (\n    <table className='Board'>\n      <tbody>{HTMLBoard}</tbody>\n    </table>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}